const {ApolloServer, gql} = require('apollo-server-lambda');
function extractRootSelectedFieldsFromInfo(info) {
    if (!info) return [];
    if ('Page' === `${info.returnType}`.slice(-4)) {
        return (((((((((info.operation || {}).selectionSet || {}).selections || [])[0] || {}).selectionSet || {}).selections || [])[0] || {}).selectionSet || {}).selections || []).filter(x => x.kind === 'Field' && ('__typename' !== (x.name || {}).value)).map(s => s.name.value);
    }
    return info.operation.selectionSet.selections[0].selectionSet.selections.filter(x => x.kind === 'Field').map(s => s.name.value);
}

const r = n => {
    const h = require(`.<%- ('undefined' === typeof operationDirectory) ? '' : `/${operationDirectory}` -%>/${n}`).handler;
    return async (parent, params = {}, {event, context}, info) => {
        const handlerEvent = {params};
        handlerEvent.params = handlerEvent.params || {};
        handlerEvent.params.fields = handlerEvent.params.fields || extractRootSelectedFieldsFromInfo(info);
        (!!event && !!event.user) && (handlerEvent.user = event.user);
        !!parent && (handlerEvent.params.parent = parent);
        return h(handlerEvent, {...context, info});
    };
};
const jwtSecret = String(process.env.JWT_SECRET || 'the-very-secret-secret');

<% if ('undefined' !== typeof schemaFile) { -%>
const typeDefs = gql(require('fs').readFileSync(`${__dirname}/<%- schemaFile -%>`, 'utf8'));
<% } else { -%>
const typeDefs = gql`
<%- 'undefined' !== typeof schema ? schema : '' -%>
`;
<% } -%>

const resolvers = {
<% Object.entries((('undefined' !== typeof resolvers) ? resolvers : undefined) || {}).forEach(([typeName, queries]) => { -%>
    <%- typeName -%>: {
<% Object.entries(queries).forEach(([k, v]) => { -%>
        <%- k -%>: r('<%- v -%>'),
<% }) -%>
    },
<% }) -%>
};

const context = ({event, context, req}) => {
    if (!!event && !!event.headers) {
        const authHeader = event.headers.Authorization || event.headers.authorization;
        if (!!authHeader) {
            event.user = require('jsonwebtoken').verify((authHeader || '').split(' ')[1], jwtSecret);
        }
    }
    return {event, context};
};

module.exports = {
    handler: require('@ohoareau/aws-apigw-vx').vx(new ApolloServer({typeDefs, resolvers, context}).createHandler({
        cors: {origin: true, credentials: true},
    })),
};