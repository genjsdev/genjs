import {GitIgnoreTemplate} from '../../src';
import path from 'path';

const expectRenderSameAsFile = (template: GitIgnoreTemplate, file: string) => {
    expect((template.render() || '').trimRight()).toEqual(require('fs').readFileSync(path.resolve(`${__dirname}/../../__fixtures__/templates/gitignores/${file}`), 'utf8').trim());
};

describe('render', () => {
    it('no ignores', () => {
        expectRenderSameAsFile(new GitIgnoreTemplate(), 'no-ignores.gitignore');
    })
    it('no ignores but custom config', () => {
        expectRenderSameAsFile(new GitIgnoreTemplate({
            ignores: [
                '/a',
                '/b',
                '/c/d',
            ],
            groups: [
                {name: 'g1', ignores: ['/e', '/f']},
                {name: 'g2', ignores: ['/g/*', '/h/i/jkl/*.m']},
            ]
        }), 'no-ignores-but-custom-config.gitignore');
    })
    it('sample custom lambda layer', () => {
        expectRenderSameAsFile(
            new GitIgnoreTemplate()
                .addIgnore('/.idea/')
        , 'sample-custom-lambda-layer.gitignore');
    })
    it('sample front', () => {
        expectRenderSameAsFile(
            new GitIgnoreTemplate()
                .addGroup('Logs', [
                    'logs', '*.log', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',
                ])
                .addGroup('Runtime data', [
                    'pids', '*.pid', '*.seed', '*.pid.lock',
                ])
                .addGroup('Directory for instrumented libs generated by jscoverage/JSCover', [
                    'lib-cov',
                ])
                .addGroup('Coverage directory used by tools like istanbul', [
                    'coverage',
                ])
                .addGroup('nyc test coverage', [
                    '.nyc_output',
                ])
                .addGroup('Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)', [
                    '.grunt',
                ])
                .addGroup('Bower dependency directory (https://bower.io/)', [
                    'bower_components',
                ])
                .addGroup('node-waf configuration', [
                    '.lock-wscript',
                ])
                .addGroup('Compiled binary addons (http://nodejs.org/api/addons.html)', [
                    'build/Release',
                ])
                .addGroup('Dependency directories', [
                    'node_modules/', 'jspm_packages/',
                ])
                .addGroup('Typescript v1 declaration files', [
                    'typings/',
                ])
                .addGroup('Optional npm cache directory', [
                    '.npm',
                ])
                .addGroup('Optional eslint cache', [
                    '.eslintcache',
                ])
                .addGroup('Optional REPL history', [
                    '.node_repl_history',
                ])
                .addGroup("Output of 'npm pack'", [
                    '*.tgz',
                ])
                .addGroup('dotenv environment variable files', [
                    '.env*',
                ])
                .addGroup('gatsby files', [
                    '.cache/', 'public',
                ])
                .addGroup('Mac files', [
                    '.DS_Store',
                ])
                .addGroup('Yarn', [
                    'yarn-error.log', '.pnp/', '.pnp.js',
                ])
                .addGroup('Yarn Integrity file', [
                    '.yarn-integrity',
                ])
        , 'sample-front.gitignore');
    })
    it('sample api', () => {
        expectRenderSameAsFile(
            new GitIgnoreTemplate()
                .addIgnore('/coverage/')
                .addIgnore('/node_modules/')
                .addIgnore('/.idea/')
            , 'sample-api.gitignore');
    })
    it('sample next', () => {
        expectRenderSameAsFile(
            new GitIgnoreTemplate()
                .addComment('See https://help.github.com/articles/ignoring-files/ for more about ignoring files.')
                .addGroup('dependencies', [
                    '/node_modules', '/.pnp', '.pnp.js',
                ])
                .addGroup('testing', [
                    '/coverage',
                ])
                .addGroup('next.js', [
                    '/.next/',
                    '/out/',
                ])
                .addGroup('production', [
                    '/build',
                ])
                .addGroup('misc', [
                    '.DS_Store',
                ])
                .addGroup('debug', [
                    'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*',
                ])
                .addGroup('local env files', [
                    '.env.local', '.env.development.local', '.env.test.local', '.env.production.local', '*.pem',
                ])
            , 'sample-next.gitignore');
    })
    it('sample monorepo js libs', () => {
        expectRenderSameAsFile(
            new GitIgnoreTemplate()
                .addIgnore('.idea/')
                .addIgnore('node_modules/')
                .addIgnore('lerna-debug.log')
                .addIgnore('npm-debug.log')
                .addIgnore('/packages/*/lib/')
                .addIgnore('/packages/*/*/lib/')
                .addIgnore('coverage/')
                .addIgnore('*.log')
                .addIgnore('*.tsbuildinfo')
                .addIgnore('/packages/*/public/')
                .addIgnore('.DS_Store')
                .addIgnore('public/')
            , 'sample-monorepo-js-libs.gitignore');
    })
})